from array import array
from os import listdir
from random import randint

from PIL import Image
from pytest import mark


def monochrome(img: Image.Image) -> None:
    for x in range(img.size[0]):
        for y in range(img.size[1]):
            color = img.getpixel((x, y))
            color = int(0.3 * color[0] + 0.59 * color[1] + 0.11 * color[2])
            img.putpixel((x, y), (color, color, color))


def test_monochrome() -> None:
    for img_path in listdir("./assets/img/"):
        img = Image.open(f"./assets/img/{img_path}")
        monochrome(img)
        assert all(
            (img.getpixel((x, y))[0] == img.getpixel((x, y))[1] == img.getpixel((x, y))[2])
            for x in range(img.size[0])
            for y in range(img.size[1])
        )


def binarization(img: Image.Image) -> None:
    monochrome(img)
    avg = 0
    for x in range(img.size[0]):
        for y in range(img.size[1]):
            avg += img.getpixel((x, y))[0]
    avg = avg // (img.size[0] * img.size[1])
    for x in range(img.size[0]):
        for y in range(img.size[1]):
            if img.getpixel((x, y))[0] > avg:
                img.putpixel((x, y), (0, 0, 0))
                continue
            img.putpixel((x, y), (255, 255, 255))


def test_binarization():
    for img_path in listdir("./assets/img/"):
        img = Image.open(f"./assets/img/{img_path}")
        binarization(img)
        assert all(
            img.getpixel((x, y))[:3] in ((0, 0, 0), (255, 255, 255))
            for x in range(img.size[0])
            for y in range(img.size[1])
        )


def floyd_steinberg(img: Image.Image):
    monochrome(img)
    for x in range(1, img.size[0] - 1):
        for y in range(img.size[1] - 1):
            old = img.getpixel((x, y))[0]
            new = round(old / 255) * 255
            img.putpixel((x, y), (new, new, new))
            if new not in (0, 255):
                print((x, y), new)
            e = old - new

            color = img.getpixel((x + 1, y))[0] + int(7 / 16 * e)
            img.putpixel((x + 1, y), (color, color, color))

            color = img.getpixel((x + 1, y + 1))[0] + int(3 / 16 * e)
            img.putpixel((x + 1, y + 1), (color, color, color))

            color = img.getpixel((x, y + 1))[0] + int(5 / 16 * e)
            img.putpixel((x, y + 1), (color, color, color))

            color = img.getpixel((x - 1, y + 1))[0] + int(5 / 16 * e)
            if color not in (0, 255):
                print("fourth", (x, y), color)
            img.putpixel((x - 1, y + 1), (color, color, color))


@mark.xfail
def test_floyd_steinberg():
    for img_path in listdir("./assets/img/"):
        img = Image.open(f"./assets/img/{img_path}")
        floyd_steinberg(img)
        # img.show()
        for x in range(img.size[0]):
            for y in range(img.size[1]):
                assert img.getpixel((x, y))[:3] in ((0, 0, 0), (255, 255, 255))


def blur(img: Image.Image, diameter: int = 3) -> None:
    border = (diameter - 1) // 2
    monochrome(img)
    img_result = img.copy()
    for x in range(border, img_result.size[0] - border):
        for y in range(border, img_result.size[1] - border):
            blur_sum = 0
            for x2 in range(-border, 1 + border):
                for y2 in range(-border, 1 + border):
                    blur_sum += img_result.getpixel((x + x2, y + y2))[0]

            blur_sum = blur_sum // (diameter ** 2)
            img.putpixel((x, y), (blur_sum, blur_sum, blur_sum))


def test_blur():
    img = Image.open("./assets/img/additive.png")
    blur(img)
    assert histogram(img) == array('l', [62125, 0, 0, 3, 37, 0, 37, 29, 0, 80, 0, 48, 34, 17, 11, 59, 0, 83, 102, 67, 32, 0, 29, 25, 31, 20, 12, 4, 42, 23, 90, 75, 0, 39, 37, 34, 39, 55, 75, 9, 12, 25, 0, 45, 37, 34, 12, 16, 43, 48, 77, 56, 28, 38, 77, 0, 179, 0, 19969, 0, 70, 47, 33, 69, 0, 54, 42, 49, 37, 24, 12, 18, 12, 21, 21, 33, 33, 47, 0, 41, 0, 61, 0, 53, 0, 31, 67, 39, 19, 24, 10, 24, 8, 28, 27, 18, 51, 250, 19979, 114, 103, 0, 96, 0, 88, 0, 68, 0, 59, 31, 0, 38, 36, 65, 0, 60, 56, 84, 0, 62, 38, 90, 0, 71, 0, 80, 0, 78, 0, 42, 70, 71, 46, 53, 39, 51, 44, 42, 106, 0, 80, 291, 5064, 0, 31, 276, 20139, 124, 91, 81, 72, 62, 62, 61, 55, 116, 0, 77, 53, 115, 0, 71, 54, 117, 0, 51, 65, 145, 0, 79, 59, 50, 78, 70, 74, 132, 5007, 621, 39, 39, 84, 0, 37, 43, 80, 0, 26, 33, 82, 0, 28, 35, 76, 0, 37, 47, 37, 37, 47, 36, 44, 83, 0, 41, 48, 62, 0, 36, 47, 84, 0, 37, 41, 94, 0, 42, 39, 82, 62, 56, 0, 45, 474, 0, 4958, 21, 29, 56, 0, 26, 41, 0, 18, 32, 25, 41, 20, 0, 50, 0, 36, 25, 44, 12, 15, 0, 33, 38, 0, 32, 46, 119, 199, 0, 4325, 244])

    img = Image.open("./assets/img/hell.png")
    blur(img)
    assert histogram(img) == array('l', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25081, 173411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

    img = Image.open("./assets/img/lion.jpeg")
    blur(img)
    assert histogram(img) == array('l', [0, 0, 0, 2, 9, 0, 19, 139, 0, 214, 0, 75, 88, 95, 110, 345, 0, 200, 191, 334, 195, 0, 187, 179, 152, 153, 112, 147, 136, 119, 198, 129, 0, 94, 93, 92, 92, 90, 162, 96, 87, 93, 0, 97, 89, 116, 89, 106, 124, 106, 108, 105, 97, 109, 238, 0, 249, 0, 260, 0, 299, 163, 157, 176, 0, 143, 162, 157, 179, 184, 209, 171, 193, 223, 204, 224, 230, 519, 0, 597, 0, 630, 0, 710, 0, 380, 368, 398, 360, 446, 417, 434, 420, 443, 437, 490, 461, 475, 499, 470, 894, 0, 906, 0, 942, 0, 997, 0, 923, 450, 0, 484, 436, 977, 0, 481, 453, 912, 0, 475, 450, 907, 0, 925, 0, 968, 0, 956, 0, 516, 478, 489, 455, 437, 473, 424, 446, 431, 827, 0, 387, 399, 730, 0, 381, 361, 363, 364, 351, 344, 343, 336, 317, 317, 294, 593, 0, 286, 280, 553, 0, 277, 274, 541, 0, 253, 223, 564, 0, 247, 251, 253, 222, 227, 226, 252, 223, 251, 199, 235, 406, 0, 175, 172, 245, 0, 121, 92, 177, 0, 78, 62, 125, 0, 51, 55, 42, 29, 15, 20, 11, 17, 0, 5, 6, 2, 0, 2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def linear_adjustment(img: Image.Image, a: int, b: int) -> None:
    monochrome(img)
    for x in range(img.size[0]):
        for y in range(img.size[1]):
            color = a * img.getpixel((x, y))[0] + b
            img.putpixel((x, y), (color, color, color))


def test_linear_adjustment():
    for img_path in listdir("./assets/img/"):
        img = Image.open(f"./assets/img/{img_path}")
        a = randint(0, 255)
        b = randint(0, 255)
        img_copy = img.copy()
        monochrome(img_copy)
        linear_adjustment(img, a, b)
        assert all(
            img.getpixel((x, y))[0] == min(255, max(0, a * img_copy.getpixel((x, y))[0] + b))
            for x in range(img.size[0])
            for y in range(img.size[1])
        )


def histogram(img: Image.Image) -> array:
    monochrome(img)
    histo = array("l", [0] * 256)
    for x in range(img.size[0]):
        for y in range(img.size[1]):
            histo[img.getpixel((x, y))[0]] += 1
    return histo


def test_histogram():
    assert histogram(Image.open("./assets/img/additive.png")) == array('l', [63567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1, 7, 3, 10, 7, 14, 9, 17, 34, 52, 53, 58, 85, 305, 20255, 87, 13, 9, 8, 4, 4, 7, 3, 5, 6, 1, 1, 3, 4, 7, 3, 7, 12, 5, 8, 13, 13, 26, 37, 45, 53, 21, 20, 25, 27, 13, 17, 20, 21, 40, 34, 65, 124, 20685, 158, 34, 24, 15, 17, 20, 12, 16, 11, 11, 15, 19, 11, 23, 17, 11, 10, 15, 13, 22, 8, 19, 21, 21, 11, 23, 15, 24, 16, 20, 14, 16, 10, 17, 20, 9, 12, 16, 22, 24, 25, 49, 183, 5675, 41, 62, 153, 20873, 76, 30, 24, 33, 19, 38, 45, 27, 24, 33, 15, 29, 25, 27, 24, 17, 20, 26, 17, 23, 31, 21, 21, 22, 23, 32, 29, 48, 87, 4951, 1131, 5, 13, 22, 11, 19, 15, 8, 16, 10, 12, 24, 9, 15, 7, 11, 34, 15, 14, 16, 5, 14, 14, 15, 26, 31, 16, 11, 25, 25, 17, 15, 7, 17, 24, 31, 18, 12, 16, 13, 23, 16, 28, 47, 49, 50, 262, 5587, 19, 26, 11, 17, 19, 18, 16, 20, 19, 14, 19, 11, 11, 11, 15, 23, 20, 21, 29, 19, 27, 42, 14, 40, 47, 49, 65, 118, 229, 4412, 687])
    assert histogram(Image.open("./assets/img/hell.png")) == array('l', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12486, 186006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    assert histogram(Image.open("./assets/img/lion.jpeg")) == array('l', [12, 18, 21, 15, 15, 19, 41, 54, 100, 124, 134, 108, 113, 115, 159, 167, 180, 211, 164, 183, 153, 162, 189, 156, 139, 144, 155, 146, 132, 120, 110, 121, 114, 104, 93, 107, 116, 92, 116, 98, 99, 109, 99, 112, 101, 111, 121, 110, 112, 103, 126, 127, 101, 117, 120, 133, 129, 131, 128, 144, 167, 167, 142, 154, 170, 153, 143, 160, 171, 179, 192, 206, 206, 191, 227, 224, 239, 236, 234, 297, 305, 297, 311, 342, 359, 354, 379, 392, 394, 361, 386, 411, 426, 458, 410, 439, 436, 427, 448, 442, 431, 412, 422, 446, 438, 490, 461, 445, 450, 441, 407, 424, 417, 437, 458, 418, 431, 435, 443, 423, 445, 424, 430, 419, 444, 455, 453, 441, 429, 419, 422, 428, 448, 385, 383, 415, 437, 419, 413, 421, 392, 370, 385, 409, 395, 397, 376, 389, 357, 344, 333, 349, 324, 369, 334, 323, 342, 312, 353, 326, 269, 273, 275, 292, 300, 273, 257, 265, 253, 277, 243, 242, 241, 241, 248, 219, 245, 251, 181, 229, 214, 207, 215, 169, 162, 146, 134, 131, 115, 98, 106, 86, 88, 91, 82, 62, 56, 47, 51, 28, 29, 29, 13, 20, 21, 9, 8, 9, 6, 6, 1, 5, 4, 3, 9, 4, 6, 5, 3, 4, 1, 1, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def simple_standardization(img: Image.Image):
    histo = histogram(img)
    start = 0
    for i in range(len(histo)):
        if histo[i] != 0:
            start = i
            break
    end = 255
    for i in range(len(histo) - 1, start, -1):
        if histo[i] != 0:
            end = i
            break
    if start == 0 and end == 255:
        return

    for x in range(img.size[0]):
        for y in range(img.size[1]):
            color = img.getpixel((x, y))[0]
            color = (color - end) / (255 - start - end) * (255 - end) + end
            color = int((color - start) / (255 - start) * 255)
            img.putpixel((x, y), (color, color, color))


def test_simple_standardization():
    img = Image.open("./assets/img/additive.png")
    simple_standardization(img)
    assert histogram(img) == array('l', [63567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 2, 1, 7, 3, 10, 7, 14, 9, 17, 34, 105, 0, 143, 0, 20560, 0, 100, 9, 8, 4, 0, 4, 7, 3, 5, 6, 1, 1, 3, 4, 7, 3, 7, 17, 0, 21, 0, 39, 0, 82, 0, 53, 21, 20, 25, 27, 13, 17, 20, 21, 40, 34, 65, 124, 20685, 158, 58, 0, 32, 0, 32, 0, 27, 0, 26, 19, 0, 11, 23, 28, 0, 10, 15, 35, 0, 8, 19, 42, 0, 34, 0, 39, 0, 36, 0, 14, 16, 10, 17, 20, 9, 12, 16, 22, 49, 0, 49, 183, 5716, 0, 62, 153, 20873, 76, 30, 24, 33, 19, 38, 45, 27, 57, 0, 15, 29, 52, 0, 24, 17, 46, 0, 17, 23, 52, 0, 21, 22, 23, 32, 29, 48, 87, 4951, 1131, 5, 13, 33, 0, 19, 15, 24, 0, 10, 12, 33, 0, 15, 7, 45, 0, 15, 14, 16, 5, 14, 14, 15, 57, 0, 16, 11, 50, 0, 17, 15, 24, 0, 24, 31, 30, 0, 16, 13, 39, 28, 47, 0, 49, 312, 0, 5587, 19, 26, 28, 0, 19, 34, 0, 20, 19, 14, 30, 11, 0, 26, 0, 23, 20, 50, 19, 27, 0, 42, 54, 0, 47, 49, 183, 229, 0, 4412, 687])

    img = Image.open("./assets/img/hell.png")
    simple_standardization(img)
    assert histogram(img) == array('l', [198492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

    img = Image.open("./assets/img/lion.jpeg")
    img.show()
    simple_standardization(img)
    assert histogram(img) == array('l', [30, 21, 0, 30, 19, 0, 41, 154, 0, 258, 0, 108, 113, 115, 159, 347, 0, 211, 164, 336, 162, 0, 189, 156, 139, 144, 155, 146, 132, 120, 231, 114, 0, 104, 93, 107, 116, 92, 214, 99, 109, 99, 0, 112, 101, 111, 121, 110, 112, 103, 126, 127, 101, 117, 253, 0, 260, 0, 272, 0, 334, 142, 154, 170, 0, 153, 143, 160, 171, 179, 192, 206, 206, 191, 227, 224, 239, 470, 0, 602, 0, 608, 0, 701, 0, 354, 379, 392, 394, 361, 386, 411, 426, 458, 410, 439, 436, 427, 448, 442, 843, 0, 868, 0, 928, 0, 906, 0, 891, 407, 0, 424, 417, 895, 0, 418, 431, 878, 0, 423, 445, 854, 0, 863, 0, 908, 0, 870, 0, 419, 422, 428, 448, 385, 383, 415, 437, 419, 834, 0, 392, 370, 794, 0, 395, 397, 376, 389, 357, 344, 333, 349, 324, 369, 334, 665, 0, 312, 353, 595, 0, 273, 275, 592, 0, 273, 257, 518, 0, 277, 243, 242, 241, 241, 248, 219, 245, 251, 181, 229, 421, 0, 215, 169, 308, 0, 134, 131, 213, 0, 106, 86, 179, 0, 82, 62, 56, 47, 51, 28, 29, 42, 0, 20, 21, 17, 0, 9, 6, 7, 0, 5, 4, 12, 0, 4, 6, 8, 4, 1, 0, 1, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    img.show()
